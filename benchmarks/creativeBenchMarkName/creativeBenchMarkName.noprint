	.section	.rodata
.PRINTSTRING:
	.string "%ld"
.PRINTLNSTRING:
	.string "%ld\n"
.READSTRING:
	.string "%ld"
	.text
.global buildList
	.type	buildList, @function
buildList:
	pushq %rbp
	movq %rsp, %rbp
	pushq %r15
	pushq %r14
	pushq %r12
	pushq %r13
	pushq %rbx
	subq $80, %rsp
	movl $16, %edi
	call malloc
	movq %rax, %r12
	movq %r12, %r14
	movl $16, %edi
	call malloc
	movq %rax, %r12
	movq %r12, %r15
	movl $16, %edi
	call malloc
	movq %rax, %r12
	movq %r12, %rbx
	movl $16, %edi
	call malloc
	movq %rax, %r12
	movq %r12, %r13
	movl $16, %edi
	call malloc
	movq %rax, %r12
	movq %r12, %r12
	movq %r12, 8(%rsp)
	movl $16, %edi
	call malloc
	movq %rax, %r12
	movq %r12, 0(%rsp)
	movq 0(%rsp), %r12
	movq %r12, %rsi
	movq %r14, %rdx
	addq $0, %rdx
	movq $.READSTRING, %rdi
	movq %rdx, %rsi
	movq $0, %rax
	call scanf
	movq %r15, %rdx
	addq $0, %rdx
	movq $.READSTRING, %rdi
	movq %rdx, %rsi
	movq $0, %rax
	call scanf
	movq %rbx, %rdx
	addq $0, %rdx
	movq $.READSTRING, %rdi
	movq %rdx, %rsi
	movq $0, %rax
	call scanf
	movq %r13, %rdx
	addq $0, %rdx
	movq $.READSTRING, %rdi
	movq %rdx, %rsi
	movq $0, %rax
	call scanf
	movq 8(%rsp), %r12
	movq %r12, %rdx
	addq $0, %rdx
	movq $.READSTRING, %rdi
	movq %rdx, %rsi
	movq $0, %rax
	call scanf
	movq %rsi, %rdx
	addq $0, %rdx
	movq $.READSTRING, %rdi
	movq %rdx, %rsi
	movq $0, %rax
	call scanf
	movq %r15, 8(%r14)
	movq %rbx, 8(%r15)
	movq %r13, 8(%rbx)
	movq 8(%rsp), %r12
	movq %r12, 8(%r13)
	movq 8(%rsp), %r12
	movq %rsi, 8(%r12)
	movq %r12, 8(%rsp)
	movq $0, %rdx
	movq %rdx, 8(%rsi)
	movq %r14, %rax
	jmp L0
L0:
	addq $80, %rsp
	popq %rbx
	popq %r13
	popq %r12
	popq %r14
	popq %r15
	movq %rbp, %rsp
	popq %rbp
	ret
	.size	buildList, .-buildList
	.text
.global multiple
	.type	multiple, @function
multiple:
	pushq %rbp
	movq %rsp, %rbp
	pushq %r15
	pushq %r14
	pushq %r12
	pushq %r13
	pushq %rbx
	subq $40, %rsp
	movq %rdi, %r12
	movq $0, %r13
	movq %r13, %r15
	movq %r12, %r13
	movq 0(%r13), %r12
	movq %r12, %rbx
	movq 8(%r13), %r12
	movq %r12, %r13
L2:
	movq $5, %r12
	cmpq %r12, %r15
	movq $0, %r14
	movq $1, %r12
	cmovlq %r12, %r14
	cmpq $1, %r14
	je L4
	jmp L3
L4:
	movq 0(%r13), %r14
	movq 0(%rsp), %r12
	movq %rbx, %r12
	imulq %r14, %r12
	movq %r12, 0(%rsp)
	movq 0(%rsp), %r12
	movq %r12, %rbx
	movq 8(%r13), %r12
	movq %r12, %r13
	movq $.PRINTLNSTRING, %rdi
	movq %rbx, %rsi
	movq $0, %rax
	call printf
	movq $1, %r14
	movq 8(%rsp), %r12
	movq %r15, %r12
	addq %r14, %r12
	movq %r12, 8(%rsp)
	movq 8(%rsp), %r12
	movq %r12, %r15
	jmp L2
L3:
	movq %rbx, %rax
	jmp L1
L1:
	addq $40, %rsp
	popq %rbx
	popq %r13
	popq %r12
	popq %r14
	popq %r15
	movq %rbp, %rsp
	popq %rbp
	ret
	.size	multiple, .-multiple
	.text
.global add
	.type	add, @function
add:
	pushq %rbp
	movq %rsp, %rbp
	pushq %r15
	pushq %r14
	pushq %r12
	pushq %r13
	pushq %rbx
	subq $40, %rsp
	movq %rdi, %r12
	movq $0, %r13
	movq %r13, %r15
	movq %r12, %r13
	movq 0(%r13), %r12
	movq %r12, %rbx
	movq 8(%r13), %r12
	movq %r12, %r13
L6:
	movq $5, %r12
	cmpq %r12, %r15
	movq $0, %r14
	movq $1, %r12
	cmovlq %r12, %r14
	cmpq $1, %r14
	je L8
	jmp L7
L8:
	movq 0(%r13), %r14
	movq 0(%rsp), %r12
	movq %rbx, %r12
	addq %r14, %r12
	movq %r12, 0(%rsp)
	movq 0(%rsp), %r12
	movq %r12, %rbx
	movq 8(%r13), %r12
	movq %r12, %r13
	movq $.PRINTLNSTRING, %rdi
	movq %rbx, %rsi
	movq $0, %rax
	call printf
	movq $1, %r14
	movq 8(%rsp), %r12
	movq %r15, %r12
	addq %r14, %r12
	movq %r12, 8(%rsp)
	movq 8(%rsp), %r12
	movq %r12, %r15
	jmp L6
L7:
	movq %rbx, %rax
	jmp L5
L5:
	addq $40, %rsp
	popq %rbx
	popq %r13
	popq %r12
	popq %r14
	popq %r15
	movq %rbp, %rsp
	popq %rbp
	ret
	.size	add, .-add
	.text
.global recurseList
	.type	recurseList, @function
recurseList:
	pushq %rbp
	movq %rsp, %rbp
	pushq %r15
	pushq %r12
	pushq %r13
	pushq %rbx
	subq $0, %rsp
	movq %rdi, %r15
L10:
	movq 8(%r15), %r13
	movq $0, %r12
	cmpq %r12, %r13
	movq $0, %r13
	movq $1, %r12
	cmoveq %r12, %r13
	cmpq $1, %r13
	je L11
	jmp L12
L11:
	movq 0(%r15), %rsi
	movq %rsi, %rax
	jmp L9
L9:
	addq $0, %rsp
	popq %rbx
	popq %r13
	popq %r12
	popq %r15
	movq %rbp, %rsp
	popq %rbp
	ret
L12:
	movq 0(%r15), %r12
	movq 8(%r15), %r13
	movq %r13, %rdi
	call recurseList
	movq %rax, %rsi
	movq %r12, %rbx
	imulq %rsi, %rbx
	movq %rbx, %rax
	jmp L9
	.size	recurseList, .-recurseList
	.text
.global main
	.type	main, @function
main:
	pushq %rbp
	movq %rsp, %rbp
	pushq %r15
	pushq %r14
	pushq %r12
	pushq %r13
	pushq %rbx
	subq $96, %rsp
	movq $0, %r12
	movq %r12, %r13
	movq $0, %r12
	movq %r12, %rbx
	call buildList
	movq %rax, %r12
	movq %r12, %r12
	movq %r12, 24(%rsp)
	movq 24(%rsp), %r12
	movq %r12, %rdi
	call multiple
	movq %rax, %r12
	movq %r12, %r14
	movq 24(%rsp), %r12
	movq %r12, %rdi
	call add
	movq %rax, %r12
	movq %r12, %r15
	movq $2, %r12
	movq %r12, 16(%rsp)
	movq 16(%rsp), %r12
	movq %r15, %rax
	movq %r15, %rdx
	sarq $63, %rdx
	idivq %r12
	movq %rax, %r15
	movq 32(%rsp), %r12
	movq %r14, %r12
	subq %r15, %r12
	movq %r12, 32(%rsp)
	movq 32(%rsp), %r12
	movq %r12, %r15
L15:
	movq $10, %r12
	cmpq %r12, %r13
	movq $0, %r12
	movq $1, %r14
	cmovlq %r14, %r12
	cmpq $1, %r12
	je L17
	jmp L16
L17:
	movq 24(%rsp), %r12
	movq %r12, %rdi
	call recurseList
	movq %rax, %r14
	movq 40(%rsp), %r12
	movq %rbx, %r12
	addq %r14, %r12
	movq %r12, 40(%rsp)
	movq 40(%rsp), %r12
	movq %r12, %rbx
	movq $1, %r14
	movq 0(%rsp), %r12
	movq %r13, %r12
	addq %r14, %r12
	movq %r12, 0(%rsp)
	movq 0(%rsp), %r12
	movq %r12, %r13
	jmp L15
L16:
	movq $.PRINTLNSTRING, %rdi
	movq %rbx, %rsi
	movq $0, %rax
	call printf
L18:
	movq $0, %r12
	cmpq %r12, %rbx
	movq $0, %r13
	movq $1, %r12
	cmovneq %r12, %r13
	cmpq $1, %r13
	je L20
	jmp L19
L20:
	movq $1, %r13
	movq 8(%rsp), %r12
	movq %rbx, %r12
	subq %r13, %r12
	movq %r12, 8(%rsp)
	movq 8(%rsp), %r12
	movq %r12, %rbx
	jmp L18
L19:
	movq $.PRINTLNSTRING, %rdi
	movq %r15, %rsi
	movq $0, %rax
	call printf
	movq $.PRINTLNSTRING, %rdi
	movq %rbx, %rsi
	movq $0, %rax
	call printf
	movq $0, %rsi
	movq %rsi, %rax
	jmp L14
L14:
	addq $96, %rsp
	popq %rbx
	popq %r13
	popq %r12
	popq %r14
	popq %r15
	movq %rbp, %rsp
	popq %rbp
	ret
	.size	main, .-main
